components:
  schemas:
    # Fields used in complex schemas
    code:
      description: A short string identifier
      example: MyAwesomeCode
      type: string
    coordinate:
      description: A position on an axis
      example: 123456
      type: number
    errors:
      description: Validation errors
      type: array
      items:
        type: object
    id:
      description: An entity unique identifier
      example: igmq45ef3qz4f3q4z3ef4qz63ef45q63zef43q4zef3
      type: string
    message:
      description: A short message
      example: This an example of a short message
      type: string
    specification:
      description: This application OpenAPI specification
      example: { foo: 'bar' }
      type: object
    username:
      description: A user unique name identifier
      example: warlordz123
      type: string

    # Complex schemas

    ## Service schemas
    RequestValidationError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: '#/components/schemas/code'
        message:
          $ref: '#/components/schemas/message'

    ServiceCriticalError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: '#/components/schemas/code'
        message:
          $ref: '#/components/schemas/message'

    ResponseValidationError:
      type: object
      required:
        - code
        - errors
      properties:
        code:
          $ref: '#/components/schemas/code'
        errors:
          $ref: '#/components/schemas/errors'

    ## Business schemas
    coordinates:
      type: object
      required:
        - x
        - y
        - z
      properties:
        x:
          $ref: '#/components/schemas/coordinate'
        y:
          $ref: '#/components/schemas/coordinate'
        z:
          $ref: '#/components/schemas/coordinate'

  # Reusable links
  links:
    Ping:
      operationRef: /self-health/ping
      description: >
        You can use this endpoint to test whether the server is online.
    Root:
      operationRef: /
      description: >
        The base endpoint

  # Reusable responses
  responses:
    400:
      description: Request error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestValidationError'
    500:
      description: Service critical error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceCriticalError'
    502:
      description: Response validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseValidationError'
